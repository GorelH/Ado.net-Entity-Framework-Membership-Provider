{"name":"Custom Entity Framework WebMatrix, Membership Provider","tagline":"EFMembership can Manage Roles and User Accounts over your Database and Website","body":"### Welcome \r\nEFMembership gives you Membership Provider for System.Security.Membership or WebMatrix.\r\nWith supporting OAuthMembership for external login like (Facebook, Twitter, Yahoo, Google, ...).\r\n\r\n![EFMembership - WebMatrix , Membership Provider](http://omidid.github.io/Ado.net-Entity-Framework-Membership-Provider/files/how-to.png)\r\n\r\nYou can use your custom model class or Builtin exist models like my Default models or Microsoft membership style\r\n\r\n### Install\r\nUse nuget packge manager to add EFMembership and dependency references to your project \r\n> For WebMatrix:\r\n```\r\nPM> Install-Package EFMembership-WebMatrix\r\n```\r\n> For Default Membership Provider:\r\n```\r\nPM> Install-Package EFMembership\r\n```\r\n\r\n### Quick Start\r\n* **To use Default Model:**\r\n\r\n```cs\r\n\tpublic class MyMembership :\r\n\t\tOmidID.Web.Security.EFMembershipProvider<\r\n\t\t\tOmidID.Web.Security.Default.DefaultUser,\r\n\t\t\tOmidID.Web.Security.Default.DefaultOAuthMembership,\r\n\t\t\tint> {\r\n\t}\r\n\r\n    public class MyRole :\r\n        OmidID.Web.Security.EFRoleProvider<\r\n            OmidID.Web.Security.Default.DefaultRole,\r\n            OmidID.Web.Security.Default.DefaultUserRole,\r\n            int> {\r\n    }\r\n```\r\n\r\n* **Do you want to use you Membership Model?**\r\n\r\n> Username, UserID, Password, PasswordFormat, PasswordSalt in User Table are required and<br/>\r\n> UserID, ProviderName, ProviderToken in OAuthMembership Table are required.\r\n\r\n```cs\r\nusing System;\r\nusing System.ComponentModel.DataAnnotations;\r\nusing OmidID.Web.Security.Mapper;\r\n\r\nnamespace MyApp {\r\n\t[Table(\"Users\")]\r\n\tpublic class MyUser { \r\n\t\t\t\t\t\r\n\t\t//If you want to use different name for your model\r\n\t\t[UserColumn(UserColumnType.UserID)]\r\n\t\t[Key]\r\n\t\tpublic long ID { get; set; }\r\n\r\n\t\t[Required]\r\n\t\t[MaxLength(300)]\r\n\t\tpublic string Username { get; set; }\r\n\t\t\t\t\t\r\n\t\t[Required]\r\n\t\t[MaxLength(100)]\r\n\t\tpublic string Password { get; set; }\r\n\r\n\t\t[Required]\r\n\t\tpublic int PasswordFormat { get; set; }\r\n\r\n\t\t[MaxLength(100)]\r\n\t\tpublic string PasswordSalt { get; set; }\r\n\r\n\t\t[UserColumn(UserColumnType.Email)]\r\n\t\t[MaxLength(100)]\r\n\t\tpublic string EmailAddress { get; set; }\r\n\r\n\t\tpublic bool IsApproved { get; set; }\r\n\r\n\t\t[UserColumn(UserColumnType.Email)]\r\n\t\tpublic DateTime CreateOn { get; set; }\r\n\t\r\n\t}\r\n}\r\n\r\n```\r\n\r\n<br/>\r\n> If you are using WebMatrix:\r\n\r\n```cs\r\nusing System;\r\nusing System.ComponentModel.DataAnnotations;\r\nusing OmidID.Web.Security.Mapper;\r\n\r\nnamespace MyApp {\r\n\t[Table(\"OAuthMemberships\")]\r\n\tpublic class MyOAuthMembership { \r\n\r\n\t\t[Key]\r\n\t\tpublic long UserID { get; set; }\r\n\r\n\t\t[Required]\r\n\t\t[MaxLength(400)]\r\n\t\t[OAuthMembership(OAuthMembershipColumnType.ProviderName)]\r\n\t\tpublic string Name { get; set; }\r\n\t\t\t\t\t\r\n\t\t[Required]\r\n\t\t[MaxLength(400)]\r\n\t\t[OAuthMembership(OAuthMembershipColumnType.ProviderToken)]\r\n\t\tpublic string Token { get; set; }\r\n\r\n\t}\r\n}\r\n```\r\n\r\n<br/>\r\n> **If you don't want to have Role in your website, you can skip this step**<br/>\r\n> OK. Now we have to create Role and UserRole (to make n to n relation between User and Role )\r\n\r\n```cs\r\nusing System;\r\nusing System.ComponentModel.DataAnnotations;\r\nusing OmidID.Web.Security.Mapper;\r\n\r\nnamespace MyApp {\t\r\n\t[Table(\"Roles\")]\r\n\tpublic class MyRole {\r\n\r\n\t\t[Key]\r\n\t\t[RoleColumn(RoleColumnType.RoleID)]\r\n\t\tpublic int RoleID { get; set; }\r\n\r\n\t\t[Required]\r\n\t\t[RoleColumn(RoleColumnType.RoleName)]\r\n\t\tpublic string RoleName { get; set; }\r\n\r\n\t\t[Required]\r\n\t\t[RoleColumn(RoleColumnType.CreateOn)]\r\n\t\tpublic DateTime CreateOn { get; set; }\r\n\r\n\t}\r\n\r\n}\r\n```\r\n<br/>\r\n\r\n```cs\r\nusing System;\r\nusing System.ComponentModel.DataAnnotations;\r\nusing OmidID.Web.Security.Mapper;\r\n\r\nnamespace MyApp {\t\r\n\t[Table(\"UserRoles\")]\r\n\tpublic class MyUserRole {\r\n\r\n\t\t[Key]\r\n\t\t[Column(Order = 1)]\r\n\t\t[UserRoleColumn(UserRoleColumnType.RoleID)]\r\n\t\tpublic int RoleID { get; set; }\r\n\t\t\t\t\t\r\n\t\t[ForeignKey(\"RoleID\")]\r\n\t\tpublic MyRole Role { get; set; }\r\n\r\n\t\t\t\t\t\r\n\t\t[Key]\r\n\t\t[Column(Order = 2)]\r\n\t\t[UserRoleColumn(UserRoleColumnType.UserID)]\r\n\t\tpublic long UserID { get; set; }\r\n\t\t\t\t\t\r\n\t\t[ForeignKey(\"UserID\")]\r\n\t\tpublic MyUser User { get; set; }\r\n\r\n\t}\r\n}\r\n```\r\n<br/>\r\n> Now you can make your custom Membership:\r\n\r\n```cs\r\nnamespace MyApp {\r\n\tpublic class MyMembership :\r\n\t\tOmidID.Web.Security.EFMembershipProvider<MyUser, MyOAuthMembership, int> \r\n\t{\r\n\t}\r\n\r\n    public class MyRole :\r\n        OmidID.Web.Security.EFRoleProvider<MyRole, MyUserRole, int> \r\n\t{\r\n    }\r\n}\r\n```\r\n<br />\r\n> **Congratulation! Now you have your Custom Membership Provider**\r\n<br />\r\n\r\n### Add Custom membership to your web.config or app.config file\r\n\r\njust open your config file and merge or add those section below to your config file:\r\n\r\n```xml\r\n<configuration>\r\n  <connectionStrings>\r\n    <add name=\"DefaultConnection\" connectionString=\"Data Source=(LocalDb)\\v11.0;Initial Catalog=aspnet-WebMatrix_Sample1-20140412113758;Integrated Security=SSPI;AttachDBFilename=|DataDirectory|\\aspnet-WebMatrix_Sample1-20140412113758.mdf\" providerName=\"System.Data.SqlClient\" />\r\n  </connectionStrings>\r\n\r\n  <system.web>\r\n    <membership defaultProvider=\"MyCustomMembershipProvider\">\r\n      <providers>\r\n        <clear />\r\n        <add name=\"MyCustomMembershipProvider\"\r\n             type=\"MyApp.MyMembership, MyApp\"\r\n             tablePrefix=\"membership_\"\r\n             connectionStringName=\"DefaultConnection\"\r\n             enablePasswordRetrieval=\"false\"\r\n             enablePasswordReset=\"true\"\r\n             requiresQuestionAndAnswer=\"false\"\r\n             requiresUniqueEmail=\"false\"\r\n             maxInvalidPasswordAttempts=\"5\"\r\n             minRequiredPasswordLength=\"6\"\r\n             minRequiredNonalphanumericCharacters=\"0\"\r\n             requiresEmail=\"false\"\r\n             passwordAttemptWindow=\"10\"\r\n             applicationName=\"/\"></add>\r\n      </providers>\r\n    </membership>\r\n\r\n\r\n    <roleManager enabled=\"true\" defaultProvider=\"MyCustomRoleProvider\">\r\n      <providers>\r\n        <clear />\r\n        <add name=\"MyCustomRoleProvider\"\r\n             membershipProvider=\"MyCustomMembershipProvider\"\r\n             type=\"MyApp.MyRole, MyApp\"\r\n             tablePrefix=\"membership_\"\r\n             connectionStringName=\"DefaultConnection\"\r\n             applicationName=\"/\" />\r\n      </providers>\r\n    </roleManager>\r\n\r\n  </system.web>\r\n</configuration>\r\n```\r\n\r\n### Initalize Database Automaticly\r\n\r\nIf you want to generate your database automaticly you can run the code below in your Application Start:\r\n\r\n```cs\r\nvar membership = System.Web.Security.Membership.Provider;\r\nvar role = System.Web.Security.Roles.Provider;\r\nvar installer = new OmidID.Web.Security.Installer();\r\n\r\ninstaller.MembershipProvider = membership;\r\ninstaller.RoleProvider = role;\r\n\r\n//Install database:\r\nbool Created = installer.CreateIfNotExist();\r\n```\r\n\r\n### Test and Example\r\n\r\nYou can download full source code from Github and run my Samples to see speed of Register and Authorize users","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}